{"remainingRequest":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/babel-loader/lib/index.js!/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/src/components/pagination.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/src/components/pagination.vue","mtime":1552386492996},{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    value: {\n      type: [Number, String]\n    },\n    total: {\n      type: Number,\n      required: true\n    },\n    forcePage: {\n      type: Number\n    },\n    change: {\n      type: Function,\n      default: function _default() {}\n    },\n    pageRange: {\n      type: Number,\n      default: 3\n    },\n    marginPages: {\n      type: Number,\n      default: 2\n    },\n    prevText: {\n      type: String,\n      default: \"<i class='material-icons'>chevron_left</i>\"\n    },\n    nextText: {\n      type: String,\n      default: \"<i class='material-icons'>chevron_right</i>\"\n    },\n    breakViewText: {\n      type: String,\n      default: 'â€¦'\n    },\n    containerClass: {\n      type: String,\n      default: \"pagination justify-content-center\"\n    },\n    pageClass: {\n      type: String\n    },\n    pageLinkClass: {\n      type: String\n    },\n    prevClass: {\n      type: String\n    },\n    prevLinkClass: {\n      type: String\n    },\n    nextClass: {\n      type: String\n    },\n    nextLinkClass: {\n      type: String\n    },\n    breakViewClass: {\n      type: String\n    },\n    breakViewLinkClass: {\n      type: String\n    },\n    activeClass: {\n      type: String,\n      default: 'active'\n    },\n    disabledClass: {\n      type: String,\n      default: 'disabled'\n    },\n    noLiSurround: {\n      type: Boolean,\n      default: false\n    },\n    firstLastButton: {\n      type: Boolean,\n      default: false\n    },\n    firstButtonText: {\n      type: String,\n      default: 'First'\n    },\n    lastButtonText: {\n      type: String,\n      default: 'Last'\n    },\n    hidePrevNext: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean\n    }\n  },\n  beforeUpdate: function beforeUpdate() {\n    if (this.forcePage === undefined) return;\n\n    if (this.forcePage !== this.selected) {\n      this.selected = this.forcePage;\n    }\n  },\n  computed: {\n    selected: {\n      get: function get() {\n        return this.value || this.innerValue;\n      },\n      set: function set(newValue) {\n        this.innerValue = newValue;\n      }\n    },\n    pages: function pages() {\n      var _this = this;\n\n      var items = {};\n\n      if (this.total <= this.pageRange) {\n        for (var index = 0; index < this.total; index++) {\n          var page = {\n            index: index,\n            content: index + 1,\n            selected: index === this.selected - 1\n          };\n          items[index] = page;\n        }\n      } else {\n        var halfPageRange = Math.floor(this.pageRange / 2);\n\n        var setPageItem = function setPageItem(index) {\n          var page = {\n            index: index,\n            content: index + 1,\n            selected: index === _this.selected - 1\n          };\n          items[index] = page;\n        };\n\n        var setBreakView = function setBreakView(index) {\n          var breakView = {\n            disabled: true,\n            breakView: true\n          };\n          items[index] = breakView;\n        }; // 1st - loop thru low end of margin pages\n\n\n        for (var i = 0; i < this.marginPages; i++) {\n          setPageItem(i);\n        } // 2nd - loop thru selected range\n\n\n        var selectedRangeLow = 0;\n\n        if (this.selected - halfPageRange > 0) {\n          selectedRangeLow = this.selected - 1 - halfPageRange;\n        }\n\n        var selectedRangeHigh = selectedRangeLow + this.pageRange - 1;\n\n        if (selectedRangeHigh >= this.total) {\n          selectedRangeHigh = this.total - 1;\n          selectedRangeLow = selectedRangeHigh - this.pageRange + 1;\n        }\n\n        for (var _i = selectedRangeLow; _i <= selectedRangeHigh && _i <= this.total - 1; _i++) {\n          setPageItem(_i);\n        } // Check if there is breakView in the left of selected range\n\n\n        if (selectedRangeLow > this.marginPages) {\n          setBreakView(selectedRangeLow - 1);\n        } // 3rd - loop thru high end of margin pages\n\n\n        for (var _i2 = this.total - 1; _i2 >= this.total - this.marginPages; _i2--) {\n          setPageItem(_i2);\n        }\n      }\n\n      return items;\n    }\n  },\n  data: function data() {\n    return {\n      innerValue: 1\n    };\n  },\n  methods: {\n    handlePageSelected: function handlePageSelected(selected) {\n      if (this.selected === selected || this.disabled) return;\n      this.change(selected);\n      this.innerValue = selected;\n      this.$emit('input', selected);\n    },\n    prevPage: function prevPage() {\n      if (this.selected <= 1) return;\n      this.handlePageSelected(this.selected - 1);\n    },\n    nextPage: function nextPage() {\n      if (this.selected >= this.total) return;\n      this.handlePageSelected(this.selected + 1);\n    },\n    firstPageSelected: function firstPageSelected() {\n      return this.selected === 1;\n    },\n    lastPageSelected: function lastPageSelected() {\n      return this.selected === this.total || this.total === 0;\n    },\n    selectFirstPage: function selectFirstPage() {\n      if (this.selected <= 1) return;\n      this.handlePageSelected(1);\n    },\n    selectLastPage: function selectLastPage() {\n      if (this.selected >= this.total) return;\n      this.handlePageSelected(this.total);\n    }\n  }\n};",{"version":3,"sources":["pagination.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\n    <div v-if=\"total > 1\">\n        <ul :class=\"containerClass\" v-if=\"!noLiSurround\">\n            \n            <li v-if=\"firstLastButton\" :class=\"[pageClass, firstPageSelected() ? disabledClass : '']\">\n                <a @click=\"selectFirstPage()\" @keyup.enter=\"selectFirstPage()\" :class=\"pageLinkClass\" :tabindex=\"firstPageSelected() ? -1 : 0\"\n                    v-html=\"firstButtonText\"></a>\n            </li>\n\n            <li v-if=\"!(firstPageSelected() && hidePrevNext)\" :class=\"[prevClass, firstPageSelected() ? disabledClass : '']\">\n                <a @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"prevLinkClass\" :tabindex=\"firstPageSelected() ? -1 : 0\"\n                    v-html=\"prevText\"></a>\n            </li>\n\n            <li v-for=\"page in pages\" :class=\"[pageClass, page.selected ? activeClass : '', page.disabled ? disabledClass : '', page.breakView ? breakViewClass: '']\" :key=\"page.index\">\n                <a v-if=\"page.breakView\" :class=\"[pageLinkClass, breakViewLinkClass]\" tabindex=\"0\">\n                    <slot name=\"breakViewContent\">{{ breakViewText }}</slot>\n                </a>\n                <a v-else-if=\"page.disabled\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n                <a v-else @click=\"handlePageSelected(page.index + 1)\" @keyup.enter=\"handlePageSelected(page.index + 1)\" :class=\"pageLinkClass\"\n                    tabindex=\"0\">{{ page.content }}</a>\n            </li>\n\n            <li v-if=\"!(lastPageSelected() && hidePrevNext)\" :class=\"[nextClass, lastPageSelected() ? disabledClass : '']\">\n                <a @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"nextLinkClass\" :tabindex=\"lastPageSelected() ? -1 : 0\"\n                    v-html=\"nextText\"></a>\n            </li>\n\n            <li v-if=\"firstLastButton\" :class=\"[pageClass, lastPageSelected() ? disabledClass : '']\">\n                <a @click=\"selectLastPage()\" @keyup.enter=\"selectLastPage()\" :class=\"pageLinkClass\" :tabindex=\"lastPageSelected() ? -1 : 0\"\n                    v-html=\"lastButtonText\"></a>\n            </li>\n        </ul>\n        <div :class=\"containerClass\" v-else>\n            <a v-if=\"firstLastButton\" @click=\"selectFirstPage()\" @keyup.enter=\"selectFirstPage()\" :class=\"[pageLinkClass, firstPageSelected() ? disabledClass : '']\"\n                tabindex=\"0\" v-html=\"firstButtonText\"></a>\n            <a v-if=\"!(firstPageSelected() && hidePrevNext)\" @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"[prevLinkClass, firstPageSelected() ? disabledClass : '']\"\n                tabindex=\"0\" v-html=\"prevText\"></a>\n            <template v-for=\"page in pages\">\n                <a v-if=\"page.breakView\" :class=\"[pageLinkClass, breakViewLinkClass, page.disabled ? disabledClass : '']\" tabindex=\"0\" :key=\"page.index\">\n                    <slot name=\"breakViewContent\">{{ breakViewText }}</slot>\n                </a>\n                <a v-else-if=\"page.disabled\" :class=\"[pageLinkClass, page.selected ? activeClass : '', disabledClass]\" tabindex=\"0\" :key=\"page.index\">\n                    {{page.content }}\n                    </a>\n                <a v-else @click=\"handlePageSelected(page.index + 1)\" @keyup.enter=\"handlePageSelected(page.index + 1)\" :class=\"[pageLinkClass, page.selected ? activeClass : '']\"\n                    tabindex=\"0\" :key=\"page\">\n                    {{ page.content }}\n                </a>\n            </template>\n            <a v-if=\"!(lastPageSelected() && hidePrevNext)\" @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"[nextLinkClass, lastPageSelected() ? disabledClass : '']\"\n                tabindex=\"0\" v-html=\"nextText\"></a>\n            <a v-if=\"firstLastButton\" @click=\"selectLastPage()\" @keyup.enter=\"selectLastPage()\" :class=\"[pageLinkClass, lastPageSelected() ? disabledClass : '']\"\n                tabindex=\"0\" v-html=\"lastButtonText\"></a>\n        </div>\n\n    </div>\n</template>\n\n<script>\n    export default {\n        props: {\n            value: {\n                type: [Number , String] \n            },\n            total: {\n                type: Number,\n                required: true\n            },\n            forcePage: {\n                type: Number\n            },\n            change: {\n                type: Function,\n                default: () => {\n                }\n            },\n            pageRange: {\n                type: Number,\n                default: 3\n            },\n            marginPages: {\n                type: Number,\n                default: 2\n            },\n            prevText: {\n                type: String,\n                default: \"<i class='material-icons'>chevron_left</i>\"\n            },\n            nextText: {\n                type: String,\n                default: \"<i class='material-icons'>chevron_right</i>\"\n            },\n            breakViewText: {\n                type: String,\n                default: 'â€¦'\n            },\n            containerClass: {\n                type: String,\n                default: \"pagination justify-content-center\"\n            },\n            pageClass: {\n                type: String\n            },\n            pageLinkClass: {\n                type: String\n            },\n            prevClass: {\n                type: String\n            },\n            prevLinkClass: {\n                type: String\n            },\n            nextClass: {\n                type: String\n            },\n            nextLinkClass: {\n                type: String\n            },\n            breakViewClass: {\n                type: String\n            },\n            breakViewLinkClass: {\n                type: String\n            },\n            activeClass: {\n                type: String,\n                default: 'active'\n            },\n            disabledClass: {\n                type: String,\n                default: 'disabled'\n            },\n            noLiSurround: {\n                type: Boolean,\n                default: false\n            },\n            firstLastButton: {\n                type: Boolean,\n                default: false\n            },\n            firstButtonText: {\n                type: String,\n                default: 'First'\n            },\n            lastButtonText: {\n                type: String,\n                default: 'Last'\n            },\n            hidePrevNext: {\n                type: Boolean,\n                default: false\n            },\n            disabled: {\n                type: Boolean\n            }\n        },\n        beforeUpdate() {\n            if (this.forcePage === undefined) return\n            if (this.forcePage !== this.selected) {\n                this.selected = this.forcePage\n            }\n        },\n        computed: {\n            selected: {\n                get: function () {\n                    return this.value || this.innerValue\n                },\n                set: function (newValue) {\n                    this.innerValue = newValue\n                }\n            },\n            pages: function () {\n                let items = {}\n                if (this.total <= this.pageRange) {\n                    for (let index = 0; index < this.total; index++) {\n                        let page = {\n                            index: index,\n                            content: index + 1,\n                            selected: index === (this.selected - 1)\n                        }\n                        items[index] = page\n                    }\n                } else {\n                    const halfPageRange = Math.floor(this.pageRange / 2)\n\n                    let setPageItem = index => {\n                        let page = {\n                            index: index,\n                            content: index + 1,\n                            selected: index === (this.selected - 1)\n                        }\n\n                        items[index] = page\n                    }\n\n                    let setBreakView = index => {\n                        let breakView = {\n                            disabled: true,\n                            breakView: true\n                        }\n\n                        items[index] = breakView\n                    }\n\n                    // 1st - loop thru low end of margin pages\n                    for (let i = 0; i < this.marginPages; i++) {\n                        setPageItem(i);\n                    }\n\n                    // 2nd - loop thru selected range\n                    let selectedRangeLow = 0;\n                    if (this.selected - halfPageRange > 0) {\n                        selectedRangeLow = this.selected - 1 - halfPageRange;\n                    }\n\n                    let selectedRangeHigh = selectedRangeLow + this.pageRange - 1;\n                    if (selectedRangeHigh >= this.total) {\n                        selectedRangeHigh = this.total - 1;\n                        selectedRangeLow = selectedRangeHigh - this.pageRange + 1;\n                    }\n\n                    for (let i = selectedRangeLow; i <= selectedRangeHigh && i <= this.total - 1; i++) {\n                        setPageItem(i);\n                    }\n\n                    // Check if there is breakView in the left of selected range\n                    if (selectedRangeLow > this.marginPages) {\n                        setBreakView(selectedRangeLow - 1)\n                    }\n\n\n                // 3rd - loop thru high end of margin pages\n                for (let i = this.total - 1; i >= this.total - this.marginPages; i--) {\n                    setPageItem(i);\n                }\n            }\n            return items\n        }\n    },\n    data() {\n        return {\n            innerValue: 1,\n        }\n    },\n    \n    methods: {\n        handlePageSelected(selected) {\n            if (this.selected === selected || this.disabled) return\n            this.change(selected)\n            this.innerValue = selected\n            this.$emit('input', selected)\n        },\n        prevPage() {\n            if (this.selected <= 1) return\n\n            this.handlePageSelected(this.selected - 1)\n        },\n        nextPage() {\n            if (this.selected >= this.total) return\n\n            this.handlePageSelected(this.selected + 1)\n        },\n        firstPageSelected() {\n            return this.selected === 1\n        },\n        lastPageSelected() {\n            return (this.selected === this.total) || (this.total === 0)\n        },\n        selectFirstPage() {\n            if (this.selected <= 1) return\n\n            this.handlePageSelected(1)\n        },\n        selectLastPage() {\n            if (this.selected >= this.total) return\n\n            this.handlePageSelected(this.total)\n        }\n    }\n    \n}\n</script>\n\n<style lang=\"scss\" scoped>\n    @import '../assets/scss/static/_variables.scss';\n    .pagination li.active a:not(.md-button) {\n        background: $purple!important;\n        background-color: $purple!important;\n        border-color: $purple!important;;\n    }\n\n    a {\n        cursor: pointer;\n    }\n</style>\n"],"sourceRoot":"src/components"}]}