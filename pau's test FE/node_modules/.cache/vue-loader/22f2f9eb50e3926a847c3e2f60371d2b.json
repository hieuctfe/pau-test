{"remainingRequest":"/Volumes/Document/Pau's test/pau's test FE/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Document/Pau's test/pau's test FE/src/components/v-money/component.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Document/Pau's test/pau's test FE/src/components/v-money/component.vue","mtime":1552898513901},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport money from './directive'\nimport defaults from './options'\nimport {format, unformat} from './utils'\n\nexport default {\n  name: 'Money',\n  \tprops: {\n  \t\tvalue: {\n  \t\t\trequired: true,\n  \t\t\ttype: [Number, String],\n  \t\t\tdefault: 0\n  \t\t},\n  \t\tmasked: {\n  \t\t\ttype: Boolean,\n  \t\t\tdefault: false\n  \t\t},\n  \t\tprecision: {\n  \t\t\ttype: Number,\n  \t\t\tdefault: () => defaults.precision\n  \t\t},\n  \t\tdecimal: {\n  \t\t\ttype: String,\n  \t\t\tdefault: () => defaults.decimal\n  \t\t},\n  \t\tthousands: {\n  \t\t\ttype: String,\n  \t\t\tdefault: () => defaults.thousands\n  \t\t},\n  \t\tprefix: {\n  \t\t\ttype: String,\n  \t\t\tdefault: () => defaults.prefix\n  \t\t},\n  \t\tsuffix: {\n  \t\t\ttype: String,\n  \t\t\tdefault: () => defaults.suffix\n  \t\t},\n  \t\tallowBlank: {\n  \t\t\ttype: Boolean,\n  \t\t\tdefault: () => defaults.allowBlank\n  \t\t},\n  \t\tmin: {\n  \t\t\ttype: Number,\n  \t\t\tdefault: 0,\n  \t\t},\n  \t\tmax: {\n  \t\t\ttype: Number,\n  \t\t\tdefault: Number.MAX_SAFE_INTEGER\n\t\t},\n\t\tplaceholder: {\n  \t\t\ttype: String,\n  \t\t\tdefault: ''\n  \t\t}\n  \t},\n\n  \tdirectives: {\n  \t\tmoney\n  \t},\n\n  \tdata() {\n  \t\treturn {\n  \t\t\tformattedValue: ''\n  \t\t}\n  \t},\n  \twatch: {\n  \t\tvalue: {\n  \t\t\timmediate: true,\n  \t\t\thandler(newValue, oldValue) {\n  \t\t\t\tvar formatted = format(newValue, this.$props)\n  \t\t\t\tif (formatted !== this.formattedValue) {\n  \t\t\t\t\tthis.formattedValue = formatted\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t},\n\n  \tmethods: {\n  \t\tchange(e) {\n  \t\t\tif (this.masked) {\n  \t\t\t\tthis.$emit('input', this.masked ? e.target.value : unformat(e.target.value, this.precision))\n  \t\t\t} else {\n\t\t\t\tvar val = unformat(e.target.value, this.precision)\n  \t\t\t\tif (val < parseInt(this.min)) {\n  \t\t\t\t\te.target.value = parseInt(this.min);\n  \t\t\t\t\treturn;\n  \t\t\t\t}\n  \t\t\t\tif (this.max != undefined && val > this.max) {\n  \t\t\t\t\te.target.value = this.max;\n  \t\t\t\t}\n  \t\t\t\tthis.$emit(\"input\", val);\n  \t\t\t}\n\t\t},\n\t\t_focus(){\n\t\t\tthis.$refs.input.focus();\n\t\t},\n\t\t_select(){\n\t\t\tthis.$refs.input.select();\n\t\t}\n  \t}\n}\n",{"version":3,"sources":["component.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"component.vue","sourceRoot":"src/components/v-money","sourcesContent":["<template lang=\"html\">\n  <input ref=\"input\" type=\"tel\"\n         :value=\"formattedValue\"\n         @change=\"change\"\n\t\t:placeholder=\"placeholder\"\n         v-money=\"{precision, decimal, thousands, prefix, suffix, allowBlank}\"\n         class=\"v-money\" />\n</template>\n\n<script>\nimport money from './directive'\nimport defaults from './options'\nimport {format, unformat} from './utils'\n\nexport default {\n  name: 'Money',\n  \tprops: {\n  \t\tvalue: {\n  \t\t\trequired: true,\n  \t\t\ttype: [Number, String],\n  \t\t\tdefault: 0\n  \t\t},\n  \t\tmasked: {\n  \t\t\ttype: Boolean,\n  \t\t\tdefault: false\n  \t\t},\n  \t\tprecision: {\n  \t\t\ttype: Number,\n  \t\t\tdefault: () => defaults.precision\n  \t\t},\n  \t\tdecimal: {\n  \t\t\ttype: String,\n  \t\t\tdefault: () => defaults.decimal\n  \t\t},\n  \t\tthousands: {\n  \t\t\ttype: String,\n  \t\t\tdefault: () => defaults.thousands\n  \t\t},\n  \t\tprefix: {\n  \t\t\ttype: String,\n  \t\t\tdefault: () => defaults.prefix\n  \t\t},\n  \t\tsuffix: {\n  \t\t\ttype: String,\n  \t\t\tdefault: () => defaults.suffix\n  \t\t},\n  \t\tallowBlank: {\n  \t\t\ttype: Boolean,\n  \t\t\tdefault: () => defaults.allowBlank\n  \t\t},\n  \t\tmin: {\n  \t\t\ttype: Number,\n  \t\t\tdefault: 0,\n  \t\t},\n  \t\tmax: {\n  \t\t\ttype: Number,\n  \t\t\tdefault: Number.MAX_SAFE_INTEGER\n\t\t},\n\t\tplaceholder: {\n  \t\t\ttype: String,\n  \t\t\tdefault: ''\n  \t\t}\n  \t},\n\n  \tdirectives: {\n  \t\tmoney\n  \t},\n\n  \tdata() {\n  \t\treturn {\n  \t\t\tformattedValue: ''\n  \t\t}\n  \t},\n  \twatch: {\n  \t\tvalue: {\n  \t\t\timmediate: true,\n  \t\t\thandler(newValue, oldValue) {\n  \t\t\t\tvar formatted = format(newValue, this.$props)\n  \t\t\t\tif (formatted !== this.formattedValue) {\n  \t\t\t\t\tthis.formattedValue = formatted\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t},\n\n  \tmethods: {\n  \t\tchange(e) {\n  \t\t\tif (this.masked) {\n  \t\t\t\tthis.$emit('input', this.masked ? e.target.value : unformat(e.target.value, this.precision))\n  \t\t\t} else {\n\t\t\t\tvar val = unformat(e.target.value, this.precision)\n  \t\t\t\tif (val < parseInt(this.min)) {\n  \t\t\t\t\te.target.value = parseInt(this.min);\n  \t\t\t\t\treturn;\n  \t\t\t\t}\n  \t\t\t\tif (this.max != undefined && val > this.max) {\n  \t\t\t\t\te.target.value = this.max;\n  \t\t\t\t}\n  \t\t\t\tthis.$emit(\"input\", val);\n  \t\t\t}\n\t\t},\n\t\t_focus(){\n\t\t\tthis.$refs.input.focus();\n\t\t},\n\t\t_select(){\n\t\t\tthis.$refs.input.select();\n\t\t}\n  \t}\n}\n</script>\n"]}]}