{"remainingRequest":"/Volumes/Document/Pau's test/pau's test FE/node_modules/babel-loader/lib/index.js!/Volumes/Document/Pau's test/pau's test FE/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Document/Pau's test/pau's test FE/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Document/Pau's test/pau's test FE/src/modules/seller/_components/account.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Document/Pau's test/pau's test FE/src/modules/seller/_components/account.vue","mtime":1553581797011},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Volumes/Document/Pau's test/pau's test FE/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapActions } from 'vuex';\nexport default {\n  name: \"account\",\n  data: function data() {\n    return {\n      accountInfo: {\n        country_code: \"US\",\n        password: '',\n        repassword: '',\n        current_password: '',\n        email: ''\n      },\n      account_validate: {\n        password: true,\n        repassword: true,\n        current_password: true\n      }\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    countries: '$_Home/getCountries'\n  })),\n  methods: _objectSpread({}, mapActions({\n    updateSellerInfo: '$_Seller/UPDATE_USER_INFO',\n    getSellerInfo: \"$_Seller/GET_USER_INFO\"\n  }), {\n    updateAccountInfo: function updateAccountInfo() {\n      var _this = this;\n\n      this.validateUserInfo();\n      var isValidate = true;\n\n      for (var key in this.account_validate) {\n        if (!this.account_validate[key]) {\n          isValidate = false;\n        }\n      }\n\n      if (isValidate) {\n        console.log(this.accountInfo);\n        this.updateSellerInfo(this.accountInfo).then(function (res) {\n          // after update here\n          console.log(res);\n\n          if (res.data.status) {\n            $notify({\n              content: \"Update success\",\n              type: \"success\"\n            });\n          } else {\n            $notify({\n              content: res.data.message,\n              type: \"danger\"\n            });\n          }\n\n          _this.resetUserInfo();\n        });\n      }\n    },\n    validateUserInfo: function validateUserInfo() {\n      this.account_validate.repassword = this.accountInfo.password == this.accountInfo.repassword && (this.accountInfo.password.length >= 6 || this.accountInfo.password.length == 0);\n      this.account_validate.password = this.accountInfo.password == this.accountInfo.repassword && (this.accountInfo.password.length >= 6 || this.accountInfo.password.length == 0);\n      this.account_validate.current_password = this.accountInfo.current_password.length >= 6;\n    },\n    initUserInfo: function initUserInfo() {\n      var _this2 = this;\n\n      this.getSellerInfo().then(function (res) {\n        if (res.status) {\n          _this2.accountInfo = _objectSpread({}, _this2.accountInfo, res.data.data);\n        } else {\n          $notify({\n            content: \"Load Seller info Fail\",\n            type: \"danger\"\n          });\n        }\n      });\n    },\n    resetUserInfo: function resetUserInfo() {\n      this.accountInfo.password = '';\n      this.accountInfo.repassword = '';\n      this.accountInfo.current_password = '';\n    }\n  }),\n  created: function created() {\n    // this.initUserInfo()\n    var seller = this.$store.getters['$_Seller/getSeller'];\n\n    if (seller) {\n      this.accountInfo = _objectSpread({}, this.accountInfo, seller);\n    }\n  },\n  watch: {\n    \"accountInfo\": {\n      handler: function handler(val) {// do stuff\n      },\n      deep: true\n    }\n  }\n};",{"version":3,"sources":["account.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"account-container\">\n        <div class=\"account-form-container row\">\n            <div class=\"form-group col col-5\">\n                <label class=\"input-title\">Email</label>\n                <input readonly class=\"form-control outline-type\" v-model=\"accountInfo.email\"/>\n            </div>\n            <div class=\"form-group col col-md-5\">\n                <label class=\"input-title\">Country*</label>\n                <div class=\"outline-type select-outline\">\n                    <select class=\"form-control\" v-model=\"accountInfo.country_code\">\n                        <option v-for=\"(item , index) in countries\" :value=\"item.code\" :key=\"`item${index}`\">\n                            {{item.name}}\n                        </option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"form-group col col-5\">\n                <label class=\"input-title\">Password</label>\n                <input class=\"form-control outline-type\" type=\"password\" :class=\"{\n                        'is-invalid': !account_validate.password,\n                    }\" v-model=\"accountInfo.password\"/>\n                <div class=\"invalid-feedback\">\n                    <span>Password and confirm password must be same</span>\n                </div>\n            </div>\n            <div class=\"form-group col col-5\">\n                <label class=\"input-title\" type=\"password\">Confirm Password</label>\n                <input class=\"form-control outline-type\" type=\"password\" :class=\"{\n                        'is-invalid': !account_validate.repassword,\n                    }\" v-model=\"accountInfo.repassword\"/>\n                <div class=\"invalid-feedback\">\n                    <span>Password and confirm password must be same</span>\n                </div>\n            </div>\n            <div class=\"form-group col col-5\">\n                <label class=\"input-title\">Current Password</label>\n                <input class=\"form-control outline-type\" type=\"password\" :class=\"{\n                        'is-invalid': !account_validate.current_password,\n                    }\" v-model=\"accountInfo.current_password\"/>\n                <div class=\"invalid-feedback\">\n                    <span>Current password is require</span>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"account-action\">\n            <button class=\"update-profile-btn btn btn-warning btn-radius-border\" @click=\"updateAccountInfo\">Update\n                Profile\n            </button>\n            <button class=\"btn\">Cancel</button>\n        </div>\n    </div>\n</template>\n\n<script>\n    import {mapGetters, mapActions} from 'vuex';\n\n    export default {\n        name: \"account\",\n        data() {\n            return {\n                accountInfo: {\n                    country_code: \"US\",\n                    password: '',\n                    repassword: '',\n                    current_password: '',\n                    email: ''\n                },\n                account_validate: {\n                    password: true,\n                    repassword: true,\n                    current_password: true\n                }\n            }\n        },\n        computed: {\n            ...mapGetters({\n                countries: '$_Home/getCountries'\n            })\n        },\n        methods: {\n            ...mapActions({\n                updateSellerInfo: '$_Seller/UPDATE_USER_INFO',\n                getSellerInfo: \"$_Seller/GET_USER_INFO\"\n            }),\n            updateAccountInfo: function () {\n                this.validateUserInfo()\n                let isValidate = true;\n                for (let key in this.account_validate) {\n                    if (!this.account_validate[key]) {\n                        isValidate = false\n                    }\n                }\n                if (isValidate) {\n                    console.log(this.accountInfo);\n                    this.updateSellerInfo(this.accountInfo).then((res) => {\n                        // after update here\n                        console.log(res);\n                        if (res.data.status) {\n                            $notify({\n                                content: \"Update success\",\n                                type: \"success\"\n                            })\n                        } else {\n                            $notify({\n                                content: res.data.message,\n                                type: \"danger\"\n                            })\n                        }\n                        this.resetUserInfo()\n                    })\n                }\n            },\n            validateUserInfo() {\n                this.account_validate.repassword = (this.accountInfo.password == this.accountInfo.repassword) && (this.accountInfo.password.length >= 6 || this.accountInfo.password.length == 0)\n                this.account_validate.password = (this.accountInfo.password == this.accountInfo.repassword) && (this.accountInfo.password.length >= 6 || this.accountInfo.password.length == 0)\n                this.account_validate.current_password = this.accountInfo.current_password.length >= 6\n            },\n            initUserInfo() {\n                this.getSellerInfo().then(res => {\n                    if (res.status) {\n                        this.accountInfo = {...this.accountInfo,...res.data.data}\n                    } else {\n                        $notify({\n                            content: \"Load Seller info Fail\",\n                            type: \"danger\"\n                        })\n                    }\n                })\n            },\n            resetUserInfo() {\n                this.accountInfo.password = ''\n                this.accountInfo.repassword = ''\n                this.accountInfo.current_password = ''\n            }\n        },\n        created: function () {\n            // this.initUserInfo()\n            var seller = this.$store.getters['$_Seller/getSeller']\n            if( seller ){\n                this.accountInfo = {...this.accountInfo,...seller}\n            }\n        },\n        watch: {\n            \"accountInfo\":{\n                handler(val){\n                    // do stuff\n                },\n                deep: true\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    @import 'src/assets/style';\n\n    .account-container {\n        .title-container {\n            margin-bottom: 40px;\n        }\n        .form-group {\n            margin-bottom: 30px;\n            input, .select-outline {\n                height: 45px;\n            }\n        }\n        .update-profile-btn {\n            color: white;\n        }\n    }\n\n</style>\n"],"sourceRoot":"src/modules/seller/_components"}]}