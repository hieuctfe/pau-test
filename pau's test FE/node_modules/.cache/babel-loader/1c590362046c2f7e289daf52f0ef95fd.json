{"remainingRequest":"/Volumes/Document/Pau's test/pau's test FE/node_modules/babel-loader/lib/index.js!/Volumes/Document/Pau's test/pau's test FE/src/components/v-carousel/utils/debounce.js","dependencies":[{"path":"/Volumes/Document/Pau's test/pau's test FE/src/components/v-carousel/utils/debounce.js","mtime":1552898513900},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _this = this;\n\n/* eslint-disable fp/no-let */\n\n/*\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n*/\nvar debounce = function debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = _this;\n\n    var later = function later() {\n      timeout = null;\n\n      if (!immediate) {\n        func.apply(context);\n      }\n    };\n\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      func.apply(context);\n    }\n  };\n};\n\nexport default debounce;",{"version":3,"sources":["/Volumes/Document/Pau's test/pau's test FE/src/components/v-carousel/utils/debounce.js"],"names":["debounce","func","wait","immediate","timeout","context","later","apply","callNow","clearTimeout","setTimeout"],"mappings":";;AAAA;;AACA;;;;;;AAMA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,EAA2B;AAC1C,MAAIC,OAAJ;AACA,SAAO,YAAM;AACX,QAAMC,OAAO,GAAG,KAAhB;;AACA,QAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBF,MAAAA,OAAO,GAAG,IAAV;;AACA,UAAI,CAACD,SAAL,EAAgB;AACdF,QAAAA,IAAI,CAACM,KAAL,CAAWF,OAAX;AACD;AACF,KALD;;AAMA,QAAMG,OAAO,GAAGL,SAAS,IAAI,CAACC,OAA9B;AACAK,IAAAA,YAAY,CAACL,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGM,UAAU,CAACJ,KAAD,EAAQJ,IAAR,CAApB;;AACA,QAAIM,OAAJ,EAAa;AACXP,MAAAA,IAAI,CAACM,KAAL,CAAWF,OAAX;AACD;AACF,GAdD;AAeD,CAjBD;;AAmBA,eAAeL,QAAf","sourcesContent":["/* eslint-disable fp/no-let */\n/*\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n*/\nconst debounce = (func, wait, immediate) => {\n  let timeout;\n  return () => {\n    const context = this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) {\n      func.apply(context);\n    }\n  };\n};\n\nexport default debounce;\n"]}]}