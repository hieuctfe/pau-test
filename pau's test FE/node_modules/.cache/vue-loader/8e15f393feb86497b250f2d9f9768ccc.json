{"remainingRequest":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/src/modules/home/_components/premium/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/src/modules/home/_components/premium/index.vue","mtime":1553226575200},{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Fireapps/DSSellerFE/ds-seller-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import ProductEmpty from '../partials/product-empty'\n    import ProductLoading from '../partials/product-loading'\n    import ListProducts from '../partials/list-products'\n    import AppSidebar from '../partials/sidebar'\n    import TabFilterRouter from '../partials/tab-filter-router'\n    import { mapGetters } from 'vuex';\n    import helper from '@/plugins/helper'\n    import Pagination  from '@/components/pagination'\n\texport default{\n        name : 'Premiums',\n        components: {\n            AppSidebar , TabFilterRouter ,ListProducts , Pagination , ProductEmpty , ProductLoading\n        },\n        metaInfo() {\n            return {\n                title: this.meta.title,\n            }\n        },\n        data(){\n            return {\n                isLoading: false,\n                sortables : ['last' ,'trending' ,'price'],\n                collection_id : '',\n                products : [],\n                default_sort : 'last',\n                meta:{\n                    title : 'All Collections'\n                },\n                pagination : {\n                    limit : 20,\n                    total : 0,\n                    total_page : 0,\n                    current_page : 1,\n                }\n            }\n        },\n        computed: {\n            ...mapGetters({\n                collections : '$_Home/getCollections',\n                countries : '$_Home/getCountries'\n            })\n        },\n        methods: {\n            getProduct(to = null){\n                if( to == null){\n                    to = this.$route\n                }\n                let sort = to.query.sort ? to.query.sort : null \n                sort = this.checkSort(sort) ? sort : this.default_sort\n                /* get current_page */\n                let page = to.query.page   ? to.query.page : 1\n                if( page ) {\n                    page = helper.isNumeric(page) ? page : 1\n                }\n                /* get collection_id */\n                let collection_id = to.params.id   ? to.params.id : null\n                if( collection_id ) {\n                    collection_id = this.getSlugId(collection_id)\n                }\n                /* get supplier_id */\n                let supplier_id = to.query.supplier_id  ? to.query.supplier_id : null \n                if( supplier_id ) {\n                    supplier_id = this.checkSupplier(supplier_id) ? supplier_id : null\n                }\n                /* get shipping_from */\n                let shipping_from = to.query.shipping_from ?  to.query.shipping_from : null\n                if( shipping_from ){\n                    shipping_from = this.checkCountry(shipping_from) ? shipping_from : null\n                }\n                /* get shipping_to */\n                let shipping_to = to.query.shipping_to  ? to.query.shipping_to : null\n                if( shipping_to ){\n                    shipping_to = this.checkCountry(shipping_to) ? shipping_to : null\n                }\n                /* get prices */\n                let prices = null\n                let price = to.query.prices \n                if( price ){\n                    var temp = price.split('-')\n                    if( temp.length == 2){\n                        var min = temp[0].trim()\n                        var max = temp[1].trim()\n                        if( helper.isNumeric(min) && helper.isNumeric(max) && parseInt(min) <= parseInt(max)){\n                            prices = price\n                        }\n                    }\n                }\n                return new Promise((resolve , reject )=>{\n                    this.$store.dispatch('$_Home/GET_LIST_PRODUCTS' , { \n                        sort : sort,\n                        collection_id: collection_id,\n                        page : page,\n                        supplier_id: supplier_id,\n                        shipping_from : shipping_from,\n                        shipping_to : shipping_to,\n                        prices : prices,\n                        limit : this.pagination.limit,\n                        is_premium : 1,\n                    }).then(res=>{\n                        let { status , data , pagination } = res\n                        if( status ){\n                            this.products = data\n                            this.pagination.total = parseInt(pagination.total) \n                            this.pagination.total_page = parseInt(pagination.total_page ) \n                            this.pagination.current_page = parseInt(pagination.current_page) \n                        }\n                    })\n                    resolve()\n                })\n            },\n            checkCountry(code){\n                return  _.find(this.countries , { code : code}) != undefined\n            },\n            checkSupplier(id){\n                return _.find(this.suppliers , { id : id}) != undefined\n            },\n            checkSort(sort){\n                return this.sortables.indexOf(sort) >= 0 \n            },\n            getCollection(){\n                var collection_id = this.getSlugId(to.params.id)\n                var findIndex = _.findIndex(this.collections , { id : collection_id})\n                if( findIndex >= 0 ){\n                    var more = findIndex >= 10 ? true : false\n                    this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : '' , more : more})\n                }else{\n                    for (let index = 0; index < this.collections.length; index++) {\n                        const collection = this.collections[index]\n                        var child = _.find( collection.childs , {id : collection_id})\n                        if( child ){\n                            var more = index >= 10 ? true : false\n                            this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : child.parent_id , more : more})\n                            break\n                        }\n                    }\n                }\n            }\n        },\n        beforeRouteUpdate : async function(to, from, next) {\n            this.isLoading = true\n            await this.getProduct(to)\n            this.isLoading = false\n            next()\n        },\n        created : async function(){\n            this.isLoading = true\n            var to = this.$route\n            var collection_id = this.getSlugId(to.params.id)\n            var findIndex = _.findIndex(this.collections , { id : collection_id})\n            if( findIndex >= 0 ){\n                var more = findIndex >= 10 ? true : false\n                this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : '' , more : more})\n            }else{\n                for (let index = 0; index < this.collections.length; index++) {\n                    const collection = this.collections[index]\n                    var child = _.find( collection.childs , {id : collection_id})\n                    if( child ){\n                        var more = index >= 10 ? true : false\n                        this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : child.parent_id , more : more})\n                        break\n                    }\n                }\n            }\n            this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : '' , more : false})\n            await this.getProduct(this.$route)\n            this.isLoading = false\n        }\n    }\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"index.vue","sourceRoot":"src/modules/home/_components/premium","sourcesContent":["<template>\n\t<div class=\"app-premium\">\n        <div class=\"app-premium-title\">\n            <h3>premium Products</h3>\n        </div>\n        <div class=\"app-premium-container container\">\n            <div class=\"app-premium-row row\">\n                <div class=\"app-premium-col app-premium-col-sidebar col\">\n                    <app-sidebar></app-sidebar>\n                </div>\n                <div class=\"app-premium-col app-premium-col-content col\">\n                    <tab-filter-router></tab-filter-router>\n                    <transition name=\"fade-transform\" mode=\"out-in\">\n                        <div class=\"row\" v-if=\"isLoading\" key=\"list-product-loading\">\n                            <div class=\"col col-12\">\n                                <product-loading :limit=\"pagination.limit\" col=\"col col-md-4 col-lg-3 m-b-30\"></product-loading>\n                            </div>\n                        </div>\n                        <div  v-else key=\"row list-product-ready\">\n                            <template v-if=\"products.length\">\n                                <list-products :products=\"products\" col=\"col col-md-4 col-lg-3 m-b-30\" :has-banner=\"false\"></list-products>\n                                <div class=\"text-center\">\n                                    <pagination v-model=\"pagination.current_page\" :total=\"pagination.total_page\"></pagination>\n                                </div>\n                            </template>\n                            <template v-else>\n                                <div class=\"col col-12 \">\n                                    <product-empty>\n                                        <p>Sorry, we couldn't find any content </p>\n                                    </product-empty>\n                                </div>\n                            </template>\n                        </div>\n                    </transition>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import ProductEmpty from '../partials/product-empty'\n    import ProductLoading from '../partials/product-loading'\n    import ListProducts from '../partials/list-products'\n    import AppSidebar from '../partials/sidebar'\n    import TabFilterRouter from '../partials/tab-filter-router'\n    import { mapGetters } from 'vuex';\n    import helper from '@/plugins/helper'\n    import Pagination  from '@/components/pagination'\n\texport default{\n        name : 'Premiums',\n        components: {\n            AppSidebar , TabFilterRouter ,ListProducts , Pagination , ProductEmpty , ProductLoading\n        },\n        metaInfo() {\n            return {\n                title: this.meta.title,\n            }\n        },\n        data(){\n            return {\n                isLoading: false,\n                sortables : ['last' ,'trending' ,'price'],\n                collection_id : '',\n                products : [],\n                default_sort : 'last',\n                meta:{\n                    title : 'All Collections'\n                },\n                pagination : {\n                    limit : 20,\n                    total : 0,\n                    total_page : 0,\n                    current_page : 1,\n                }\n            }\n        },\n        computed: {\n            ...mapGetters({\n                collections : '$_Home/getCollections',\n                countries : '$_Home/getCountries'\n            })\n        },\n        methods: {\n            getProduct(to = null){\n                if( to == null){\n                    to = this.$route\n                }\n                let sort = to.query.sort ? to.query.sort : null \n                sort = this.checkSort(sort) ? sort : this.default_sort\n                /* get current_page */\n                let page = to.query.page   ? to.query.page : 1\n                if( page ) {\n                    page = helper.isNumeric(page) ? page : 1\n                }\n                /* get collection_id */\n                let collection_id = to.params.id   ? to.params.id : null\n                if( collection_id ) {\n                    collection_id = this.getSlugId(collection_id)\n                }\n                /* get supplier_id */\n                let supplier_id = to.query.supplier_id  ? to.query.supplier_id : null \n                if( supplier_id ) {\n                    supplier_id = this.checkSupplier(supplier_id) ? supplier_id : null\n                }\n                /* get shipping_from */\n                let shipping_from = to.query.shipping_from ?  to.query.shipping_from : null\n                if( shipping_from ){\n                    shipping_from = this.checkCountry(shipping_from) ? shipping_from : null\n                }\n                /* get shipping_to */\n                let shipping_to = to.query.shipping_to  ? to.query.shipping_to : null\n                if( shipping_to ){\n                    shipping_to = this.checkCountry(shipping_to) ? shipping_to : null\n                }\n                /* get prices */\n                let prices = null\n                let price = to.query.prices \n                if( price ){\n                    var temp = price.split('-')\n                    if( temp.length == 2){\n                        var min = temp[0].trim()\n                        var max = temp[1].trim()\n                        if( helper.isNumeric(min) && helper.isNumeric(max) && parseInt(min) <= parseInt(max)){\n                            prices = price\n                        }\n                    }\n                }\n                return new Promise((resolve , reject )=>{\n                    this.$store.dispatch('$_Home/GET_LIST_PRODUCTS' , { \n                        sort : sort,\n                        collection_id: collection_id,\n                        page : page,\n                        supplier_id: supplier_id,\n                        shipping_from : shipping_from,\n                        shipping_to : shipping_to,\n                        prices : prices,\n                        limit : this.pagination.limit,\n                        is_premium : 1,\n                    }).then(res=>{\n                        let { status , data , pagination } = res\n                        if( status ){\n                            this.products = data\n                            this.pagination.total = parseInt(pagination.total) \n                            this.pagination.total_page = parseInt(pagination.total_page ) \n                            this.pagination.current_page = parseInt(pagination.current_page) \n                        }\n                    })\n                    resolve()\n                })\n            },\n            checkCountry(code){\n                return  _.find(this.countries , { code : code}) != undefined\n            },\n            checkSupplier(id){\n                return _.find(this.suppliers , { id : id}) != undefined\n            },\n            checkSort(sort){\n                return this.sortables.indexOf(sort) >= 0 \n            },\n            getCollection(){\n                var collection_id = this.getSlugId(to.params.id)\n                var findIndex = _.findIndex(this.collections , { id : collection_id})\n                if( findIndex >= 0 ){\n                    var more = findIndex >= 10 ? true : false\n                    this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : '' , more : more})\n                }else{\n                    for (let index = 0; index < this.collections.length; index++) {\n                        const collection = this.collections[index]\n                        var child = _.find( collection.childs , {id : collection_id})\n                        if( child ){\n                            var more = index >= 10 ? true : false\n                            this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : child.parent_id , more : more})\n                            break\n                        }\n                    }\n                }\n            }\n        },\n        beforeRouteUpdate : async function(to, from, next) {\n            this.isLoading = true\n            await this.getProduct(to)\n            this.isLoading = false\n            next()\n        },\n        created : async function(){\n            this.isLoading = true\n            var to = this.$route\n            var collection_id = this.getSlugId(to.params.id)\n            var findIndex = _.findIndex(this.collections , { id : collection_id})\n            if( findIndex >= 0 ){\n                var more = findIndex >= 10 ? true : false\n                this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : '' , more : more})\n            }else{\n                for (let index = 0; index < this.collections.length; index++) {\n                    const collection = this.collections[index]\n                    var child = _.find( collection.childs , {id : collection_id})\n                    if( child ){\n                        var more = index >= 10 ? true : false\n                        this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : child.parent_id , more : more})\n                        break\n                    }\n                }\n            }\n            this.$store.commit('$_Home/UPDATE_SIDEBAR_OPTION' , { collection_id : '' , more : false})\n            await this.getProduct(this.$route)\n            this.isLoading = false\n        }\n    }\n</script>\n<style lang=\"scss\" scoped>\n    @import 'src/assets/style';\n    .app-premium{\n        \n        &-title{\n            padding: 30px 0;\n            text-align: center;\n            background: #f2f2f2;\n            text-transform: capitalize;\n        }\n        &-container{\n            padding: 30px 0;\n        }\n        &-row{\n\n        }\n        &-col{\n            &-sidebar{\n                max-width: 20%;\n            }\n            &-content{\n                max-width: 80%;\n            }\n        }\n    }\n</style>"]}]}