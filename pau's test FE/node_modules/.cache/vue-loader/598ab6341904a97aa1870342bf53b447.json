{"remainingRequest":"/Volumes/Document/Pau's test/pau's test FE/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Document/Pau's test/pau's test FE/src/components/pagination.vue?vue&type=style&index=0&id=0d27aeac&lang=scss&scoped=true&","dependencies":[{"path":"/Volumes/Document/Pau's test/pau's test FE/src/components/pagination.vue","mtime":1554347196336},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Document/Pau's test/pau's test FE/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'src/assets/style';\na {\n    cursor: pointer;\n}\n.pagination{\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    li{\n        display: inline-flex;\n        padding: 0 3px;\n        a{\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 36px;\n            min-width: 36px;\n            padding: 0;\n            text-decoration: none;\n            color:$text-color;\n            border: 1px solid $yellow;\n            font-size: 14px;\n            font-weight: 500;\n            background: #fff;\n            user-select: none;\n            &:hover{\n                background: $yellow;\n                color:#fff;\n            }\n        }\n        &.disabled{\n            opacity: 0.7;\n            cursor: not-allowed;\n            a{\n                pointer-events: none;\n                &:hover{\n                    background: #fff;\n                    color:$text-color;\n                }\n            }\n        }\n        &.active{\n            a{\n                background: $yellow;\n                color:#fff;\n            }\n        }\n    }\n}\n",{"version":3,"sources":["pagination.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pagination.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <ul :class=\"containerClass\" v-if=\"total > 1\">\n        <template v-if=\"routerLink\">\n            <li v-if=\"firstLastButton\" :class=\"[pageClass, firstPageSelected() ? disabledClass : '']\">\n                <router-link @click=\"selectFirstPage()\" @keyup.enter=\"selectFirstPage()\" :class=\"pageLinkClass\" :tabindex=\"firstPageSelected() ? -1 : 0\"\n                    v-html=\"firstButtonText\" :to=\"setRouterLink(1)\"></router-link>\n            </li>\n\n            <li v-if=\"!(firstPageSelected() && hidePrevNext)\" :class=\"[prevClass, firstPageSelected() ? disabledClass : '']\">\n                <router-link :to=\"setRouterLink(selected - 1)\" @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"prevLinkClass\" :tabindex=\"firstPageSelected() ? -1 : 0\"\n                    v-html=\"prevText\"></router-link>\n            </li>\n\n            <li v-for=\"(page, index) in pages\" :class=\"[pageClass, page.selected ? activeClass : '', page.disabled ? disabledClass : '', page.breakView ? breakViewClass: '']\" :key=\"`page_index_${index}`\">\n                <a v-if=\"page.breakView\" :class=\"[pageLinkClass, breakViewLinkClass]\" tabindex=\"0\">\n                    <slot name=\"breakViewContent\">{{ breakViewText }}</slot>\n                </a>\n                <a v-else-if=\"page.disabled\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n                <router-link v-else @click=\"handlePageSelected(page.index + 1)\"\n                @keyup.enter=\"handlePageSelected(page.index + 1)\"\n                :class=\"pageLinkClass\" :to=\"setRouterLink(page.index + 1)\"\n                    tabindex=\"0\">{{ page.content }}</router-link>\n            </li>\n\n            <li v-if=\"!(lastPageSelected() && hidePrevNext)\" :class=\"[nextClass, lastPageSelected() ? disabledClass : '']\">\n                <router-link :to=\"setRouterLink(selected + 1)\" @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"nextLinkClass\" :tabindex=\"lastPageSelected() ? -1 : 0\"\n                    v-html=\"nextText\"></router-link>\n            </li>\n\n            <li v-if=\"firstLastButton\" :class=\"[pageClass, lastPageSelected() ? disabledClass : '']\">\n                <router-link :to=\"setRouterLink(total)\"  @click=\"selectLastPage()\" @keyup.enter=\"selectLastPage()\" :class=\"pageLinkClass\" :tabindex=\"lastPageSelected() ? -1 : 0\"\n                    v-html=\"lastButtonText\"></router-link>\n            </li>\n        </template>\n        <template v-else>\n            <li v-if=\"firstLastButton\" :class=\"[pageClass, firstPageSelected() ? disabledClass : '']\">\n                <a @click=\"selectFirstPage()\" @keyup.enter=\"selectFirstPage()\" :class=\"pageLinkClass\" :tabindex=\"firstPageSelected() ? -1 : 0\"\n                    v-html=\"firstButtonText\" ></a>\n            </li>\n\n            <li v-if=\"!(firstPageSelected() && hidePrevNext)\" :class=\"[prevClass, firstPageSelected() ? disabledClass : '']\">\n                <a  @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"prevLinkClass\" :tabindex=\"firstPageSelected() ? -1 : 0\"\n                    v-html=\"prevText\"></a>\n            </li>\n\n            <li v-for=\"(page, index) in pages\" :class=\"[pageClass, page.selected ? activeClass : '', page.disabled ? disabledClass : '', page.breakView ? breakViewClass: '']\" :key=\"`page_index_${index}`\">\n                <a v-if=\"page.breakView\" :class=\"[pageLinkClass, breakViewLinkClass]\" tabindex=\"0\">\n                    <slot name=\"breakViewContent\">{{ breakViewText }}</slot>\n                </a>\n                <a v-else-if=\"page.disabled\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n                <a v-else @click=\"handlePageSelected(page.index + 1)\"\n                @keyup.enter=\"handlePageSelected(page.index + 1)\"\n                :class=\"pageLinkClass\"\n                    tabindex=\"0\">{{ page.content }}</a>\n            </li>\n\n            <li v-if=\"!(lastPageSelected() && hidePrevNext)\" :class=\"[nextClass, lastPageSelected() ? disabledClass : '']\">\n                <a  @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"nextLinkClass\" :tabindex=\"lastPageSelected() ? -1 : 0\"\n                    v-html=\"nextText\"></a>\n            </li>\n\n            <li v-if=\"firstLastButton\" :class=\"[pageClass, lastPageSelected() ? disabledClass : '']\">\n                <a   @click=\"selectLastPage()\" @keyup.enter=\"selectLastPage()\" :class=\"pageLinkClass\" :tabindex=\"lastPageSelected() ? -1 : 0\"\n                    v-html=\"lastButtonText\"></a>\n            </li>\n        </template>\n    </ul>\n</template>\n\n<script>\nexport default {\n    props: {\n        value: {\n            type: [Number, String]\n        },\n        total: {\n            type: Number,\n            required: true\n        },\n        routerLink :{\n            default : true,\n        },\n        forcePage: {\n            type: Number\n        },\n        change: {\n            type: Function,\n            default: () => {}\n        },\n        pageRange: {\n            type: Number,\n            default: 5\n        },\n        marginPages: {\n            type: Number,\n            default: 1\n        },\n        prevText: {\n            type: String,\n            default: '<i class=\"fal fa-angle-left\"></i>'\n        },\n        nextText: {\n            type: String,\n            default: '<i class=\"fal fa-angle-right\"></i>'\n        },\n        breakViewText: {\n            type: String,\n            default: 'â€¦'\n        },\n        containerClass: {\n            type: String,\n            default : 'pagination'\n        },\n        pageClass: {\n            type: String\n        },\n        pageLinkClass: {\n            type: String\n        },\n        prevClass: {\n            type: String\n        },\n        prevLinkClass: {\n            type: String\n        },\n        nextClass: {\n            type: String\n        },\n        nextLinkClass: {\n            type: String\n        },\n        breakViewClass: {\n            type: String\n        },\n        breakViewLinkClass: {\n            type: String\n        },\n        activeClass: {\n            type: String,\n            default: 'active'\n        },\n        disabledClass: {\n            type: String,\n            default: 'disabled'\n        },\n        noLiSurround: {\n            type: Boolean,\n            default: false\n        },\n        firstLastButton: {\n            type: Boolean,\n            default: false\n        },\n        firstButtonText: {\n            type: String,\n            default: 'First'\n        },\n        lastButtonText: {\n            type: String,\n            default: 'Last'\n        },\n        hidePrevNext: {\n            type: Boolean,\n            default: false\n        }\n    },\n    beforeUpdate() {\n        if (this.forcePage === undefined) return\n        if (this.forcePage !== this.selected) {\n            this.selected = this.forcePage\n        }\n    },\n    computed: {\n        selected: {\n            get: function () {\n                return this.value || this.innerValue\n            },\n            set: function (newValue) {\n                this.innerValue = newValue\n            }\n        },\n        pages: function () {\n            let items = {}\n            if (this.total <= this.pageRange) {\n                for (let index = 0; index < this.total; index++) {\n                    let page = {\n                        index: index,\n                        content: index + 1,\n                        selected: index === (this.selected - 1)\n                    }\n                    items[index] = page\n                }\n            } else {\n                const halfPageRange = Math.floor(this.pageRange / 2)\n\n                let setPageItem = index => {\n                    let page = {\n                        index: index,\n                        content: index + 1,\n                        selected: index === (this.selected - 1)\n                    }\n\n                    items[index] = page\n                }\n\n                let setBreakView = index => {\n                    let breakView = {\n                        disabled: true,\n                        breakView: true\n                    }\n\n                    items[index] = breakView\n                }\n\n                // 1st - loop thru low end of margin pages\n                for (let i = 0; i < this.marginPages; i++) {\n                    setPageItem(i);\n                }\n\n                // 2nd - loop thru selected range\n                let selectedRangeLow = 0;\n                if (this.selected - halfPageRange > 0) {\n                    selectedRangeLow = this.selected - 1 - halfPageRange;\n                }\n\n                let selectedRangeHigh = selectedRangeLow + this.pageRange - 1;\n                if (selectedRangeHigh >= this.total) {\n                    selectedRangeHigh = this.total - 1;\n                    selectedRangeLow = selectedRangeHigh - this.pageRange + 1;\n                }\n\n                for (let i = selectedRangeLow; i <= selectedRangeHigh && i <= this.total - 1; i++) {\n                    setPageItem(i);\n                }\n\n                // Check if there is breakView in the left of selected range\n                if (selectedRangeLow > this.marginPages) {\n                    setBreakView(selectedRangeLow - 1)\n                }\n\n                // Check if there is breakView in the right of selected range\n                if (selectedRangeHigh + 1 < this.total - this.marginPages) {\n                    setBreakView(selectedRangeHigh + 1)\n                }\n\n                // 3rd - loop thru high end of margin pages\n                for (let i = this.total - 1; i >= this.total - this.marginPages; i--) {\n                    setPageItem(i);\n                }\n            }\n            return items\n        }\n    },\n    data() {\n        return {\n            innerValue: 1,\n        }\n    },\n    methods: {\n        setRouterLink(page){\n            var route = {\n                name : this.$route.name,\n                query : JSON.parse(JSON.stringify(this.$route.query)),\n                params : JSON.parse(JSON.stringify(this.$route.params)),\n            }\n            route.query['page'] = page\n            return this.setRouterLinkDefault(route)\n        },\n        handlePageSelected(selected) {\n            if (this.selected === selected) return\n\n            this.innerValue = selected\n            this.$emit('input', selected)\n            this.change(selected)\n        },\n        prevPage() {\n            if (this.selected <= 1) return\n\n            this.handlePageSelected(this.selected - 1)\n        },\n        nextPage() {\n            if (this.selected >= this.total) return\n\n            this.handlePageSelected(this.selected + 1)\n        },\n        firstPageSelected() {\n            return this.selected === 1\n        },\n        lastPageSelected() {\n            return (this.selected === this.total) || (this.total === 0)\n        },\n        selectFirstPage() {\n            if (this.selected <= 1) return\n\n            this.handlePageSelected(1)\n        },\n        selectLastPage() {\n            if (this.selected >= this.total) return\n\n            this.handlePageSelected(this.total)\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n    @import 'src/assets/style';\n    a {\n        cursor: pointer;\n    }\n    .pagination{\n        display: flex;\n        justify-content: center;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        li{\n            display: inline-flex;\n            padding: 0 3px;\n            a{\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                min-height: 36px;\n                min-width: 36px;\n                padding: 0;\n                text-decoration: none;\n                color:$text-color;\n                border: 1px solid $yellow;\n                font-size: 14px;\n                font-weight: 500;\n                background: #fff;\n                user-select: none;\n                &:hover{\n                    background: $yellow;\n                    color:#fff;\n                }\n            }\n            &.disabled{\n                opacity: 0.7;\n                cursor: not-allowed;\n                a{\n                    pointer-events: none;\n                    &:hover{\n                        background: #fff;\n                        color:$text-color;\n                    }\n                }\n            }\n            &.active{\n                a{\n                    background: $yellow;\n                    color:#fff;\n                }\n            }\n        }\n    }\n</style>\n"]}]}